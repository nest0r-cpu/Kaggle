{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e07cfb0b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:55.938279Z",
     "iopub.status.busy": "2025-01-03T01:02:55.937919Z",
     "iopub.status.idle": "2025-01-03T01:02:56.429689Z",
     "shell.execute_reply": "2025-01-03T01:02:56.428152Z"
    },
    "papermill": {
     "duration": 0.504777,
     "end_time": "2025-01-03T01:02:56.431980",
     "exception": false,
     "start_time": "2025-01-03T01:02:55.927203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/housing-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/housing-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e20833c7",
   "metadata": {
    "papermill": {
     "duration": 0.008004,
     "end_time": "2025-01-03T01:02:56.449756",
     "exception": false,
     "start_time": "2025-01-03T01:02:56.441752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Step 1 Import Libaries/ Setting up**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69ee913c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:56.468434Z",
     "iopub.status.busy": "2025-01-03T01:02:56.467777Z",
     "iopub.status.idle": "2025-01-03T01:02:58.324007Z",
     "shell.execute_reply": "2025-01-03T01:02:58.322344Z"
    },
    "papermill": {
     "duration": 1.867728,
     "end_time": "2025-01-03T01:02:58.325968",
     "exception": false,
     "start_time": "2025-01-03T01:02:56.458240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Libraries imported successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "print(\"Libraries imported successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4885f8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.344875Z",
     "iopub.status.busy": "2025-01-03T01:02:58.344320Z",
     "iopub.status.idle": "2025-01-03T01:02:58.490837Z",
     "shell.execute_reply": "2025-01-03T01:02:58.489236Z"
    },
    "papermill": {
     "duration": 0.15823,
     "end_time": "2025-01-03T01:02:58.492922",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.334692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Import successful\n"
     ]
    }
   ],
   "source": [
    "df_1 = pd.read_csv(\"/kaggle/input/housing-prices-advanced-regression-techniques/train.csv\")\n",
    "df_2 = pd.read_csv (\"/kaggle/input/housing-prices-advanced-regression-techniques/test.csv\")\n",
    "if 'SalePrice' not in df_2.columns:\n",
    "    df_2['SalePrice'] =0\n",
    "df = pd.concat([df_1, df_2], axis = 0)\n",
    "df = df.set_index('Id')\n",
    "print(\"Import successful\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db230a2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.512342Z",
     "iopub.status.busy": "2025-01-03T01:02:58.511897Z",
     "iopub.status.idle": "2025-01-03T01:02:58.548214Z",
     "shell.execute_reply": "2025-01-03T01:02:58.547004Z"
    },
    "papermill": {
     "duration": 0.048312,
     "end_time": "2025-01-03T01:02:58.550280",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.501968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "Id                                                                    \n",
       "1           60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "2           20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "3           60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "4           70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "5           60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "   LandContour Utilities LotConfig  ... PoolArea PoolQC Fence MiscFeature  \\\n",
       "Id                                  ...                                     \n",
       "1          Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n",
       "2          Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n",
       "3          Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n",
       "4          Lvl    AllPub    Corner  ...        0    NaN   NaN         NaN   \n",
       "5          Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n",
       "\n",
       "   MiscVal MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "Id                                                             \n",
       "1        0      2    2008        WD         Normal     208500  \n",
       "2        0      5    2007        WD         Normal     181500  \n",
       "3        0      9    2008        WD         Normal     223500  \n",
       "4        0      2    2006        WD        Abnorml     140000  \n",
       "5        0     12    2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00e34829",
   "metadata": {
    "papermill": {
     "duration": 0.008357,
     "end_time": "2025-01-03T01:02:58.568168",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.559811",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Checking for Null Values:\n",
    "\n",
    "* Identify missing values in your dataset (columns with NaN values).\n",
    "* Print the list of these columns for better understanding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "27092d79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.587235Z",
     "iopub.status.busy": "2025-01-03T01:02:58.586881Z",
     "iopub.status.idle": "2025-01-03T01:02:58.604231Z",
     "shell.execute_reply": "2025-01-03T01:02:58.603160Z"
    },
    "papermill": {
     "duration": 0.029076,
     "end_time": "2025-01-03T01:02:58.606152",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.577076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MSSubClass       False\n",
       "MSZoning          True\n",
       "LotFrontage       True\n",
       "LotArea          False\n",
       "Street           False\n",
       "                 ...  \n",
       "MoSold           False\n",
       "YrSold           False\n",
       "SaleType          True\n",
       "SaleCondition    False\n",
       "SalePrice        False\n",
       "Length: 80, dtype: bool"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum() >0 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ecafbba",
   "metadata": {
    "papermill": {
     "duration": 0.008665,
     "end_time": "2025-01-03T01:02:58.623796",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.615131",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The collums with a null number "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e4cd2b0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.643297Z",
     "iopub.status.busy": "2025-01-03T01:02:58.642962Z",
     "iopub.status.idle": "2025-01-03T01:02:58.667960Z",
     "shell.execute_reply": "2025-01-03T01:02:58.666536Z"
    },
    "papermill": {
     "duration": 0.037025,
     "end_time": "2025-01-03T01:02:58.670034",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.633009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MSZoning           4\n",
       "LotFrontage      486\n",
       "Alley           2721\n",
       "Utilities          2\n",
       "Exterior1st        1\n",
       "Exterior2nd        1\n",
       "MasVnrType      1766\n",
       "MasVnrArea        23\n",
       "BsmtQual          81\n",
       "BsmtCond          82\n",
       "BsmtExposure      82\n",
       "BsmtFinType1      79\n",
       "BsmtFinSF1         1\n",
       "BsmtFinType2      80\n",
       "BsmtFinSF2         1\n",
       "BsmtUnfSF          1\n",
       "TotalBsmtSF        1\n",
       "Electrical         1\n",
       "BsmtFullBath       2\n",
       "BsmtHalfBath       2\n",
       "KitchenQual        1\n",
       "Functional         2\n",
       "FireplaceQu     1420\n",
       "GarageType       157\n",
       "GarageYrBlt      159\n",
       "GarageFinish     159\n",
       "GarageCars         1\n",
       "GarageArea         1\n",
       "GarageQual       159\n",
       "GarageCond       159\n",
       "PoolQC          2909\n",
       "Fence           2348\n",
       "MiscFeature     2814\n",
       "SaleType           1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()[df.isnull().sum()>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9426b7c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.689754Z",
     "iopub.status.busy": "2025-01-03T01:02:58.689346Z",
     "iopub.status.idle": "2025-01-03T01:02:58.717321Z",
     "shell.execute_reply": "2025-01-03T01:02:58.716011Z"
    },
    "papermill": {
     "duration": 0.040362,
     "end_time": "2025-01-03T01:02:58.719611",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.679249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "df_null = df[df.isnull().sum()[df.isnull().sum() > 0].index]\n",
    "print()\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "be8789e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.739580Z",
     "iopub.status.busy": "2025-01-03T01:02:58.739139Z",
     "iopub.status.idle": "2025-01-03T01:02:58.765571Z",
     "shell.execute_reply": "2025-01-03T01:02:58.764136Z"
    },
    "papermill": {
     "duration": 0.038958,
     "end_time": "2025-01-03T01:02:58.767804",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.728846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>Alley</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>Exterior1st</th>\n",
       "      <th>Exterior2nd</th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>SaleType</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>196.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>...</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>548.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>...</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>162.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>...</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>608.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Wd Sdng</td>\n",
       "      <td>Wd Shng</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>...</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>3.0</td>\n",
       "      <td>642.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>350.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>...</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>3.0</td>\n",
       "      <td>836.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WD</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSZoning  LotFrontage Alley Utilities Exterior1st Exterior2nd MasVnrType  \\\n",
       "Id                                                                            \n",
       "1        RL         65.0   NaN    AllPub     VinylSd     VinylSd    BrkFace   \n",
       "2        RL         80.0   NaN    AllPub     MetalSd     MetalSd        NaN   \n",
       "3        RL         68.0   NaN    AllPub     VinylSd     VinylSd    BrkFace   \n",
       "4        RL         60.0   NaN    AllPub     Wd Sdng     Wd Shng        NaN   \n",
       "5        RL         84.0   NaN    AllPub     VinylSd     VinylSd    BrkFace   \n",
       "\n",
       "    MasVnrArea BsmtQual BsmtCond  ... GarageYrBlt GarageFinish  GarageCars  \\\n",
       "Id                                ...                                        \n",
       "1        196.0       Gd       TA  ...      2003.0          RFn         2.0   \n",
       "2          0.0       Gd       TA  ...      1976.0          RFn         2.0   \n",
       "3        162.0       Gd       TA  ...      2001.0          RFn         2.0   \n",
       "4          0.0       TA       Gd  ...      1998.0          Unf         3.0   \n",
       "5        350.0       Gd       TA  ...      2000.0          RFn         3.0   \n",
       "\n",
       "   GarageArea  GarageQual  GarageCond  PoolQC Fence  MiscFeature  SaleType  \n",
       "Id                                                                          \n",
       "1       548.0          TA          TA     NaN   NaN          NaN        WD  \n",
       "2       460.0          TA          TA     NaN   NaN          NaN        WD  \n",
       "3       608.0          TA          TA     NaN   NaN          NaN        WD  \n",
       "4       642.0          TA          TA     NaN   NaN          NaN        WD  \n",
       "5       836.0          TA          TA     NaN   NaN          NaN        WD  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_null.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "31c4c2c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:58.788700Z",
     "iopub.status.busy": "2025-01-03T01:02:58.788216Z",
     "iopub.status.idle": "2025-01-03T01:02:59.519756Z",
     "shell.execute_reply": "2025-01-03T01:02:59.518504Z"
    },
    "papermill": {
     "duration": 0.74417,
     "end_time": "2025-01-03T01:02:59.521645",
     "exception": false,
     "start_time": "2025-01-03T01:02:58.777475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Id'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df_null.isnull())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f030bfd3",
   "metadata": {
    "papermill": {
     "duration": 0.010694,
     "end_time": "2025-01-03T01:02:59.543402",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.532708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Drop Null Columns (Optional):\n",
    "\n",
    "\n",
    "* If there are columns where most values are null, drop them entirely.\n",
    "* Loop each column in the DataFrame (df) and droppped any column where most entries are null.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "61e819c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.567139Z",
     "iopub.status.busy": "2025-01-03T01:02:59.566670Z",
     "iopub.status.idle": "2025-01-03T01:02:59.598462Z",
     "shell.execute_reply": "2025-01-03T01:02:59.597073Z"
    },
    "papermill": {
     "duration": 0.045838,
     "end_time": "2025-01-03T01:02:59.600324",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.554486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Succsessfully dropped\n"
     ]
    }
   ],
   "source": [
    "df_objects = df[df.select_dtypes(include=['object']).columns]\n",
    "df = df.drop(df[df_objects.isna().sum()[df_objects.isna().sum() > 1100].index], axis = 1)\n",
    "print(\"Succsessfully dropped\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "61a5c7f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.625029Z",
     "iopub.status.busy": "2025-01-03T01:02:59.624525Z",
     "iopub.status.idle": "2025-01-03T01:02:59.691056Z",
     "shell.execute_reply": "2025-01-03T01:02:59.689751Z"
    },
    "papermill": {
     "duration": 0.081862,
     "end_time": "2025-01-03T01:02:59.693189",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.611327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Identify columns with more than 1100 missing values\n",
    "cols_to_drop = df_objects.columns[df_objects.isna().sum() > 1100]\n",
    "\n",
    "# Drop these columns from the DataFrame\n",
    "df_objects = df_objects.drop(columns=cols_to_drop)\n",
    "\n",
    "# Fill remaining missing values with 'null'\n",
    "df_objects = df_objects.fillna('null')\n",
    "\n",
    "# One-hot encoding for the categorical columns\n",
    "df_objects_encoded = pd.get_dummies(df_objects)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "706276e2",
   "metadata": {
    "papermill": {
     "duration": 0.010596,
     "end_time": "2025-01-03T01:02:59.714799",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.704203",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Separate Numerical Columns:\n",
    "\n",
    "* Retain only columns that have numerical data types (e.g., integers, floats).\n",
    "* Drop object-type (non-numerical) columns for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "92ed9736",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.738563Z",
     "iopub.status.busy": "2025-01-03T01:02:59.738114Z",
     "iopub.status.idle": "2025-01-03T01:02:59.762057Z",
     "shell.execute_reply": "2025-01-03T01:02:59.760664Z"
    },
    "papermill": {
     "duration": 0.03824,
     "end_time": "2025-01-03T01:02:59.764051",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.725811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition1</th>\n",
       "      <th>Condition2</th>\n",
       "      <th>...</th>\n",
       "      <th>Electrical</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>Functional</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>RFn</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Veenker</td>\n",
       "      <td>Feedr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>TA</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>RFn</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>RFn</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Crawfor</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Detchd</td>\n",
       "      <td>Unf</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>RL</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NoRidge</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>...</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Typ</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>RFn</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSZoning Street LotShape LandContour Utilities LotConfig LandSlope  \\\n",
       "Id                                                                      \n",
       "1        RL   Pave      Reg         Lvl    AllPub    Inside       Gtl   \n",
       "2        RL   Pave      Reg         Lvl    AllPub       FR2       Gtl   \n",
       "3        RL   Pave      IR1         Lvl    AllPub    Inside       Gtl   \n",
       "4        RL   Pave      IR1         Lvl    AllPub    Corner       Gtl   \n",
       "5        RL   Pave      IR1         Lvl    AllPub       FR2       Gtl   \n",
       "\n",
       "   Neighborhood Condition1 Condition2  ... Electrical KitchenQual Functional  \\\n",
       "Id                                     ...                                     \n",
       "1       CollgCr       Norm       Norm  ...      SBrkr          Gd        Typ   \n",
       "2       Veenker      Feedr       Norm  ...      SBrkr          TA        Typ   \n",
       "3       CollgCr       Norm       Norm  ...      SBrkr          Gd        Typ   \n",
       "4       Crawfor       Norm       Norm  ...      SBrkr          Gd        Typ   \n",
       "5       NoRidge       Norm       Norm  ...      SBrkr          Gd        Typ   \n",
       "\n",
       "   GarageType GarageFinish GarageQual GarageCond PavedDrive SaleType  \\\n",
       "Id                                                                     \n",
       "1      Attchd          RFn         TA         TA          Y       WD   \n",
       "2      Attchd          RFn         TA         TA          Y       WD   \n",
       "3      Attchd          RFn         TA         TA          Y       WD   \n",
       "4      Detchd          Unf         TA         TA          Y       WD   \n",
       "5      Attchd          RFn         TA         TA          Y       WD   \n",
       "\n",
       "   SaleCondition  \n",
       "Id                \n",
       "1         Normal  \n",
       "2         Normal  \n",
       "3         Normal  \n",
       "4        Abnorml  \n",
       "5         Normal  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_objects.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e41c2876",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.788097Z",
     "iopub.status.busy": "2025-01-03T01:02:59.787575Z",
     "iopub.status.idle": "2025-01-03T01:02:59.799304Z",
     "shell.execute_reply": "2025-01-03T01:02:59.797977Z"
    },
    "papermill": {
     "duration": 0.025884,
     "end_time": "2025-01-03T01:02:59.801339",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.775455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MSZoning\n",
       "RL         2265\n",
       "RM          460\n",
       "FV          139\n",
       "RH           26\n",
       "C (all)      25\n",
       "null          4\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_objects['MSZoning'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "81e61ee2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.826122Z",
     "iopub.status.busy": "2025-01-03T01:02:59.825695Z",
     "iopub.status.idle": "2025-01-03T01:02:59.848273Z",
     "shell.execute_reply": "2025-01-03T01:02:59.847082Z"
    },
    "papermill": {
     "duration": 0.037419,
     "end_time": "2025-01-03T01:02:59.850157",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.812738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSZoning_C (all)</th>\n",
       "      <th>MSZoning_FV</th>\n",
       "      <th>MSZoning_RH</th>\n",
       "      <th>MSZoning_RL</th>\n",
       "      <th>MSZoning_RM</th>\n",
       "      <th>MSZoning_null</th>\n",
       "      <th>Street_Grvl</th>\n",
       "      <th>Street_Pave</th>\n",
       "      <th>LotShape_IR1</th>\n",
       "      <th>LotShape_IR2</th>\n",
       "      <th>...</th>\n",
       "      <th>SaleType_New</th>\n",
       "      <th>SaleType_Oth</th>\n",
       "      <th>SaleType_WD</th>\n",
       "      <th>SaleType_null</th>\n",
       "      <th>SaleCondition_Abnorml</th>\n",
       "      <th>SaleCondition_AdjLand</th>\n",
       "      <th>SaleCondition_Alloca</th>\n",
       "      <th>SaleCondition_Family</th>\n",
       "      <th>SaleCondition_Normal</th>\n",
       "      <th>SaleCondition_Partial</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 247 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    MSZoning_C (all)  MSZoning_FV  MSZoning_RH  MSZoning_RL  MSZoning_RM  \\\n",
       "Id                                                                         \n",
       "1              False        False        False         True        False   \n",
       "2              False        False        False         True        False   \n",
       "3              False        False        False         True        False   \n",
       "4              False        False        False         True        False   \n",
       "5              False        False        False         True        False   \n",
       "\n",
       "    MSZoning_null  Street_Grvl  Street_Pave  LotShape_IR1  LotShape_IR2  ...  \\\n",
       "Id                                                                       ...   \n",
       "1           False        False         True         False         False  ...   \n",
       "2           False        False         True         False         False  ...   \n",
       "3           False        False         True          True         False  ...   \n",
       "4           False        False         True          True         False  ...   \n",
       "5           False        False         True          True         False  ...   \n",
       "\n",
       "    SaleType_New  SaleType_Oth  SaleType_WD  SaleType_null  \\\n",
       "Id                                                           \n",
       "1          False         False         True          False   \n",
       "2          False         False         True          False   \n",
       "3          False         False         True          False   \n",
       "4          False         False         True          False   \n",
       "5          False         False         True          False   \n",
       "\n",
       "    SaleCondition_Abnorml  SaleCondition_AdjLand  SaleCondition_Alloca  \\\n",
       "Id                                                                       \n",
       "1                   False                  False                 False   \n",
       "2                   False                  False                 False   \n",
       "3                   False                  False                 False   \n",
       "4                    True                  False                 False   \n",
       "5                   False                  False                 False   \n",
       "\n",
       "    SaleCondition_Family  SaleCondition_Normal  SaleCondition_Partial  \n",
       "Id                                                                     \n",
       "1                  False                  True                  False  \n",
       "2                  False                  True                  False  \n",
       "3                  False                  True                  False  \n",
       "4                  False                 False                  False  \n",
       "5                  False                  True                  False  \n",
       "\n",
       "[5 rows x 247 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_objects_encoded.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6c74727a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.876656Z",
     "iopub.status.busy": "2025-01-03T01:02:59.876206Z",
     "iopub.status.idle": "2025-01-03T01:02:59.923875Z",
     "shell.execute_reply": "2025-01-03T01:02:59.922150Z"
    },
    "papermill": {
     "duration": 0.063872,
     "end_time": "2025-01-03T01:02:59.925978",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.862106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSZoning_null\n",
      "Utilities_null\n",
      "Exterior1st_null\n",
      "Exterior2nd_null\n",
      "BsmtQual_null\n",
      "BsmtCond_null\n",
      "BsmtExposure_null\n",
      "BsmtFinType1_null\n",
      "BsmtFinType2_null\n",
      "Electrical_null\n",
      "KitchenQual_null\n",
      "Functional_null\n",
      "GarageType_null\n",
      "GarageFinish_null\n",
      "GarageQual_null\n",
      "GarageCond_null\n",
      "SaleType_null\n"
     ]
    }
   ],
   "source": [
    "for i in df_objects_encoded.columns:\n",
    "    if 'null' in i:\n",
    "        df_objects_encoded = df_objects_encoded.drop(i, axis = 1)\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0dd22fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.951497Z",
     "iopub.status.busy": "2025-01-03T01:02:59.951167Z",
     "iopub.status.idle": "2025-01-03T01:02:59.965936Z",
     "shell.execute_reply": "2025-01-03T01:02:59.964790Z"
    },
    "papermill": {
     "duration": 0.030235,
     "end_time": "2025-01-03T01:02:59.968288",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.938053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "new_df =pd.concat([df, df_objects_encoded], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6ec0a9ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:02:59.995733Z",
     "iopub.status.busy": "2025-01-03T01:02:59.995288Z",
     "iopub.status.idle": "2025-01-03T01:03:00.003100Z",
     "shell.execute_reply": "2025-01-03T01:02:59.999513Z"
    },
    "papermill": {
     "duration": 0.024366,
     "end_time": "2025-01-03T01:03:00.005911",
     "exception": false,
     "start_time": "2025-01-03T01:02:59.981545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New columns created\n"
     ]
    }
   ],
   "source": [
    "len(new_df.columns)\n",
    "print('New columns created')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "980a9549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:00.034968Z",
     "iopub.status.busy": "2025-01-03T01:03:00.034484Z",
     "iopub.status.idle": "2025-01-03T01:03:00.054841Z",
     "shell.execute_reply": "2025-01-03T01:03:00.053398Z"
    },
    "papermill": {
     "duration": 0.037438,
     "end_time": "2025-01-03T01:03:00.057198",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.019760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LotFrontage     486\n",
       "MasVnrArea       23\n",
       "BsmtFinSF1        1\n",
       "BsmtFinSF2        1\n",
       "BsmtUnfSF         1\n",
       "TotalBsmtSF       1\n",
       "BsmtFullBath      2\n",
       "BsmtHalfBath      2\n",
       "GarageYrBlt     159\n",
       "GarageCars        1\n",
       "GarageArea        1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = new_df.drop(df.select_dtypes(include=['object']), axis =1)\n",
    "\n",
    "new_df.isna().sum()[new_df.isna().sum() > 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2db466b5",
   "metadata": {
    "papermill": {
     "duration": 0.012847,
     "end_time": "2025-01-03T01:03:00.083917",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.071070",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Impute Missing Values:\n",
    "\n",
    "* Mode Columns: For categorical columns, fill missing values with the mode (most frequent value).\n",
    "* Mean Columns: For numerical columns, fill missing values with the mean (average value).\n",
    "* Use functions like .fillna() to handle this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1d616472",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:00.114536Z",
     "iopub.status.busy": "2025-01-03T01:03:00.114139Z",
     "iopub.status.idle": "2025-01-03T01:03:00.138232Z",
     "shell.execute_reply": "2025-01-03T01:03:00.136884Z"
    },
    "papermill": {
     "duration": 0.041494,
     "end_time": "2025-01-03T01:03:00.140177",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.098683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Mode_columns = ['GarageCars', 'GarageYrBlt', 'BsmtFullBath', 'BsmtHalfBath']\n",
    "Mean_columns = ['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'GarageArea']\n",
    "\n",
    "for i in Mode_columns:\n",
    "    new_df[i] = new_df[i].fillna(new_df[i].mode()[0])\n",
    "\n",
    "for i in Mean_columns:\n",
    "    new_df[i] = new_df[i].fillna(np.round(new_df[i].mean()))\n",
    "\n",
    "new_df.isna().sum()[new_df.isna().sum() > 0]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "819ec62d",
   "metadata": {
    "papermill": {
     "duration": 0.011849,
     "end_time": "2025-01-03T01:03:00.164293",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.152444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 2: Prepare Data for Training\n",
    "# Split Training and Testing Data:\n",
    "* Combine your training and testing data temporarily for consistent pre-processing.\n",
    "* After cleaning, split them back into two datasets (df1 for training, df2 for testing).\n",
    "\n",
    "# Drop Target Variable in Testing Data:\n",
    "* For testing data (df2), drop the column you’re predicting (e.g., SalePrice).\n",
    "# Save Final Clean DataFrames:\n",
    "* The training data (df1) should have both features and the target variable.\n",
    "* The testing data (df2) should only contain features.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c6aaaaf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:00.190716Z",
     "iopub.status.busy": "2025-01-03T01:03:00.190256Z",
     "iopub.status.idle": "2025-01-03T01:03:00.197879Z",
     "shell.execute_reply": "2025-01-03T01:03:00.196726Z"
    },
    "papermill": {
     "duration": 0.023481,
     "end_time": "2025-01-03T01:03:00.199983",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.176502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split into training and testing data\n",
    "training_data = new_df[0:len(df_1)]\n",
    "testing_data = new_df[len(df_1):]\n",
    "\n",
    "# Correct column name for dropping\n",
    "testing_data = testing_data.drop(columns='SalePrice')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "022bafb7",
   "metadata": {
    "papermill": {
     "duration": 0.012182,
     "end_time": "2025-01-03T01:03:00.225105",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.212923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 3: Train-Test Split\n",
    "# Divide Training Data:\n",
    "\n",
    "# Use train_test_split to divide your training data into:\n",
    " \n",
    ">    1. Training Set: 80% of the data to train the model.\n",
    ">    2. Validation Set: 20% to evaluate how well the model performs.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "758a0e11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:00.253103Z",
     "iopub.status.busy": "2025-01-03T01:03:00.252717Z",
     "iopub.status.idle": "2025-01-03T01:03:01.334827Z",
     "shell.execute_reply": "2025-01-03T01:03:01.333490Z"
    },
    "papermill": {
     "duration": 1.099707,
     "end_time": "2025-01-03T01:03:01.337169",
     "exception": false,
     "start_time": "2025-01-03T01:03:00.237462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.metrics import mean_squared_error \n",
    "from sklearn.linear_model import LinearRegression \n",
    "from xgboost import XGBRegressor \n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6968e27c",
   "metadata": {
    "papermill": {
     "duration": 0.015405,
     "end_time": "2025-01-03T01:03:01.366563",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.351158",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Input (X) and Output (Y):\n",
    "\n",
    "\n",
    "\n",
    "> * X: Features (independent variables).\n",
    "> * Y: Target variable (SalePrice).\n",
    "\n",
    "\n",
    "# Reshape Target Variable:\n",
    "\n",
    "> * Ensuring the target variable (Y) has two dimensions, as models often expect this format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f0877abc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:01.396514Z",
     "iopub.status.busy": "2025-01-03T01:03:01.396063Z",
     "iopub.status.idle": "2025-01-03T01:03:01.417805Z",
     "shell.execute_reply": "2025-01-03T01:03:01.416342Z"
    },
    "papermill": {
     "duration": 0.041314,
     "end_time": "2025-01-03T01:03:01.420411",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.379097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1168, 266), (1168, 1))"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = training_data.drop(columns='SalePrice')  # Correct variable name\n",
    "y = training_data['SalePrice']              # Correct variable name\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "# Reshape Y_train and Y_test if needed\n",
    "Y_train = np.reshape(Y_train, (-1, 1))\n",
    "Y_test = np.reshape(Y_test, (-1, 1))\n",
    "X_train.shape, Y_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36052b02",
   "metadata": {
    "papermill": {
     "duration": 0.022474,
     "end_time": "2025-01-03T01:03:01.466691",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.444217",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# * ***Make Sure to Import the Required Models*** *\n",
    "\n",
    "Import:\n",
    "\n",
    "\n",
    "> * Linear Regression* XGBoost Regressor (gradient boosting)\n",
    ">  * Random Forest Regressor*\n",
    ">  * \"Install external libraries if necessary, e.g., pip install xgboost.\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2ea4046",
   "metadata": {
    "papermill": {
     "duration": 0.01479,
     "end_time": "2025-01-03T01:03:01.500851",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.486061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 4: Model Training\n",
    "To Train Models:\n",
    "* We need to define each model using its specific parameters (e.g., n_estimators, learning_rate).\n",
    "* Train the model using the .fit() method with the training data (X_train, Y_train).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3215df7",
   "metadata": {
    "papermill": {
     "duration": 0.018474,
     "end_time": "2025-01-03T01:03:01.535898",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.517424",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***Evaluating the Performance:***\n",
    "\n",
    "\n",
    "\n",
    "> 1. Test the model on the validation set (X_test, Y_test).\n",
    "> 2. Use Mean Squared Error (MSE) as a performance metric (lower MSE indicates better performance).\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dc79137",
   "metadata": {
    "papermill": {
     "duration": 0.01571,
     "end_time": "2025-01-03T01:03:01.572198",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.556488",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model 1 : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2bb9aa0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:01.611104Z",
     "iopub.status.busy": "2025-01-03T01:03:01.610664Z",
     "iopub.status.idle": "2025-01-03T01:03:01.726802Z",
     "shell.execute_reply": "2025-01-03T01:03:01.724747Z"
    },
    "papermill": {
     "duration": 0.144078,
     "end_time": "2025-01-03T01:03:01.737579",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.593501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "662917707.8660058"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Define and fit the model\n",
    "model_1 = LinearRegression()\n",
    "model_1.fit(X_train, Y_train)\n",
    "\n",
    "# Predict and calculate the mean squared error\n",
    "y_pred = model_1.predict(X_test)\n",
    "mean_squared_error(Y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "714b704f",
   "metadata": {
    "papermill": {
     "duration": 0.01436,
     "end_time": "2025-01-03T01:03:01.843641",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.829281",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model 2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "955432e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:01.871285Z",
     "iopub.status.busy": "2025-01-03T01:03:01.870877Z",
     "iopub.status.idle": "2025-01-03T01:03:05.898935Z",
     "shell.execute_reply": "2025-01-03T01:03:05.897924Z"
    },
    "papermill": {
     "duration": 4.044915,
     "end_time": "2025-01-03T01:03:05.901303",
     "exception": false,
     "start_time": "2025-01-03T01:03:01.856388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "648000393.6589011"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model_2 = XGBRegressor(n_estimators=1000, learning_rate=0.1)\n",
    "model_2.fit(X_train, Y_train)\n",
    "y_pred = model_2.predict(X_test)\n",
    "mean_squared_error(Y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fd7fbc1",
   "metadata": {
    "papermill": {
     "duration": 0.012863,
     "end_time": "2025-01-03T01:03:05.929969",
     "exception": false,
     "start_time": "2025-01-03T01:03:05.917106",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ef2b1d5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:05.960403Z",
     "iopub.status.busy": "2025-01-03T01:03:05.959971Z",
     "iopub.status.idle": "2025-01-03T01:03:08.838821Z",
     "shell.execute_reply": "2025-01-03T01:03:08.837508Z"
    },
    "papermill": {
     "duration": 2.897938,
     "end_time": "2025-01-03T01:03:08.841134",
     "exception": false,
     "start_time": "2025-01-03T01:03:05.943196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "661540911.6994056"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model_3 = RandomForestRegressor(n_estimators=100)\n",
    "model_3.fit(X_train, Y_train.ravel())\n",
    "y_pred = model_3.predict(X_test)\n",
    "mean_squared_error(Y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19a527db",
   "metadata": {
    "papermill": {
     "duration": 0.012989,
     "end_time": "2025-01-03T01:03:08.867307",
     "exception": false,
     "start_time": "2025-01-03T01:03:08.854318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Choose the Best Model:\n",
    "\n",
    "> Compare the MSE scores of all models and select the one with the lowest error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "166f423d",
   "metadata": {
    "papermill": {
     "duration": 0.01311,
     "end_time": "2025-01-03T01:03:08.893305",
     "exception": false,
     "start_time": "2025-01-03T01:03:08.880195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model 2 had the lowest error margin\n",
    "\n",
    "\n",
    "> Model 1: 621043871.86406171\n",
    "\n",
    "> Model 2: 3637.1583048676791\n",
    "\n",
    "> Model 3: 760064704.4433995\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efcae36c",
   "metadata": {
    "papermill": {
     "duration": 0.012844,
     "end_time": "2025-01-03T01:03:08.919316",
     "exception": false,
     "start_time": "2025-01-03T01:03:08.906472",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Now lets test the Models witht the full data set and see the actual margin of error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d330df92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:08.945843Z",
     "iopub.status.busy": "2025-01-03T01:03:08.945445Z",
     "iopub.status.idle": "2025-01-03T01:03:09.035020Z",
     "shell.execute_reply": "2025-01-03T01:03:09.030235Z"
    },
    "papermill": {
     "duration": 0.109918,
     "end_time": "2025-01-03T01:03:09.041808",
     "exception": false,
     "start_time": "2025-01-03T01:03:08.931890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "359279225.0828797"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model_1 = LinearRegression()\n",
    "model_1.fit(X, y)\n",
    "y_pred = model_1.predict(X_test)\n",
    "mean_squared_error(Y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f3257527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:09.148233Z",
     "iopub.status.busy": "2025-01-03T01:03:09.147885Z",
     "iopub.status.idle": "2025-01-03T01:03:13.393879Z",
     "shell.execute_reply": "2025-01-03T01:03:13.392716Z"
    },
    "papermill": {
     "duration": 4.282314,
     "end_time": "2025-01-03T01:03:13.396185",
     "exception": false,
     "start_time": "2025-01-03T01:03:09.113871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4561.72169682751"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_2 = XGBRegressor(n_estimators=1000, learning_rate=0.1)\n",
    "model_2.fit(X,y)\n",
    "y_pred = model_2.predict(X_test)\n",
    "mean_squared_error(Y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0fb8e80e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:13.427935Z",
     "iopub.status.busy": "2025-01-03T01:03:13.427499Z",
     "iopub.status.idle": "2025-01-03T01:03:16.940046Z",
     "shell.execute_reply": "2025-01-03T01:03:16.938857Z"
    },
    "papermill": {
     "duration": 3.528804,
     "end_time": "2025-01-03T01:03:16.942058",
     "exception": false,
     "start_time": "2025-01-03T01:03:13.413254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "88111886.13740581"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_3 = RandomForestRegressor(n_estimators=100)\n",
    "model_3.fit(X, y)\n",
    "y_pred = model_3.predict(X_test)\n",
    "mean_squared_error(Y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d403d588",
   "metadata": {
    "papermill": {
     "duration": 0.01221,
     "end_time": "2025-01-03T01:03:16.967313",
     "exception": false,
     "start_time": "2025-01-03T01:03:16.955103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# This code will produce a line plot comparing the actual prices (Y_test) and predicted prices (y_pred), sorted by Y_test values for better readability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2e7077ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:16.993861Z",
     "iopub.status.busy": "2025-01-03T01:03:16.993421Z",
     "iopub.status.idle": "2025-01-03T01:03:17.212272Z",
     "shell.execute_reply": "2025-01-03T01:03:17.211025Z"
    },
    "papermill": {
     "duration": 0.234576,
     "end_time": "2025-01-03T01:03:17.214455",
     "exception": false,
     "start_time": "2025-01-03T01:03:16.979879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Sort indices based on Y_test for better visualization\n",
    "sort_indices = np.argsort(Y_test.ravel()) \n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(np.arange(len(Y_test)), Y_test[sort_indices], label='Original', color='blue')\n",
    "plt.plot(np.arange(len(Y_test)), y_pred[sort_indices], label='Predicted', color='red')\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.title(\"Original vs Predicted Prices\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4a428ba8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-03T01:03:17.245639Z",
     "iopub.status.busy": "2025-01-03T01:03:17.245262Z",
     "iopub.status.idle": "2025-01-03T01:03:17.332151Z",
     "shell.execute_reply": "2025-01-03T01:03:17.329683Z"
    },
    "papermill": {
     "duration": 0.105961,
     "end_time": "2025-01-03T01:03:17.335124",
     "exception": false,
     "start_time": "2025-01-03T01:03:17.229163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Predict using model_2\n",
    "pred = model_2.predict(testing_data)\n",
    "\n",
    "# Create the final DataFrame\n",
    "Final = pd.DataFrame()\n",
    "Final['Id'] = testing_data.index\n",
    "Final['SalePrice'] = pred\n",
    "\n",
    "# Write DataFrame to a CSV file without index\n",
    "Final.to_csv('output.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 858076,
     "sourceId": 1463222,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 25.086822,
   "end_time": "2025-01-03T01:03:18.374995",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-03T01:02:53.288173",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
