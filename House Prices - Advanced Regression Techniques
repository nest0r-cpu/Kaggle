{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1463222,"sourceType":"datasetVersion","datasetId":858076}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:39.183756Z","iopub.execute_input":"2025-01-03T00:33:39.184111Z","iopub.status.idle":"2025-01-03T00:33:39.192985Z","shell.execute_reply.started":"2025-01-03T00:33:39.184084Z","shell.execute_reply":"2025-01-03T00:33:39.191992Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/housing-prices-advanced-regression-techniques/train.csv\n/kaggle/input/housing-prices-advanced-regression-techniques/test.csv\n","output_type":"stream"}],"execution_count":33},{"cell_type":"markdown","source":"**Step 1 Import Libaries/ Setting up**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(\"Libraries imported successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:43.010366Z","iopub.execute_input":"2025-01-03T00:33:43.010804Z","iopub.status.idle":"2025-01-03T00:33:43.016100Z","shell.execute_reply.started":"2025-01-03T00:33:43.010773Z","shell.execute_reply":"2025-01-03T00:33:43.014782Z"}},"outputs":[{"name":"stdout","text":"Libraries imported successfully!\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"df_1 = pd.read_csv(\"/kaggle/input/housing-prices-advanced-regression-techniques/train.csv\")\ndf_2 = pd.read_csv (\"/kaggle/input/housing-prices-advanced-regression-techniques/test.csv\")\nif 'SalePrice' not in df_2.columns:\n    df_2['SalePrice'] =0\ndf = pd.concat([df_1, df_2], axis = 0)\ndf = df.set_index('Id')\nprint(\"Import successful\" )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:45.121010Z","iopub.execute_input":"2025-01-03T00:33:45.121362Z","iopub.status.idle":"2025-01-03T00:33:45.179551Z","shell.execute_reply.started":"2025-01-03T00:33:45.121334Z","shell.execute_reply":"2025-01-03T00:33:45.178466Z"}},"outputs":[{"name":"stdout","text":"Import successful\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:47.418835Z","iopub.execute_input":"2025-01-03T00:33:47.419192Z","iopub.status.idle":"2025-01-03T00:33:47.443867Z","shell.execute_reply.started":"2025-01-03T00:33:47.419161Z","shell.execute_reply":"2025-01-03T00:33:47.442708Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"    MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\nId                                                                    \n1           60       RL         65.0     8450   Pave   NaN      Reg   \n2           20       RL         80.0     9600   Pave   NaN      Reg   \n3           60       RL         68.0    11250   Pave   NaN      IR1   \n4           70       RL         60.0     9550   Pave   NaN      IR1   \n5           60       RL         84.0    14260   Pave   NaN      IR1   \n\n   LandContour Utilities LotConfig  ... PoolArea PoolQC Fence MiscFeature  \\\nId                                  ...                                     \n1          Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n2          Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n3          Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n4          Lvl    AllPub    Corner  ...        0    NaN   NaN         NaN   \n5          Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n\n   MiscVal MoSold  YrSold  SaleType  SaleCondition  SalePrice  \nId                                                             \n1        0      2    2008        WD         Normal     208500  \n2        0      5    2007        WD         Normal     181500  \n3        0      9    2008        WD         Normal     223500  \n4        0      2    2006        WD        Abnorml     140000  \n5        0     12    2008        WD         Normal     250000  \n\n[5 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Corner</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 80 columns</p>\n</div>"},"metadata":{}}],"execution_count":36},{"cell_type":"markdown","source":"# Checking for Null Values:\n\n* Identify missing values in your dataset (columns with NaN values).\n* Print the list of these columns for better understanding.","metadata":{}},{"cell_type":"code","source":"df.isna().sum() >0 ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:50.765217Z","iopub.execute_input":"2025-01-03T00:33:50.765582Z","iopub.status.idle":"2025-01-03T00:33:50.782147Z","shell.execute_reply.started":"2025-01-03T00:33:50.765551Z","shell.execute_reply":"2025-01-03T00:33:50.781099Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"MSSubClass       False\nMSZoning          True\nLotFrontage       True\nLotArea          False\nStreet           False\n                 ...  \nMoSold           False\nYrSold           False\nSaleType          True\nSaleCondition    False\nSalePrice        False\nLength: 80, dtype: bool"},"metadata":{}}],"execution_count":37},{"cell_type":"markdown","source":"The collums with a null number ","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()[df.isnull().sum()>0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:53.594211Z","iopub.execute_input":"2025-01-03T00:33:53.594630Z","iopub.status.idle":"2025-01-03T00:33:53.619183Z","shell.execute_reply.started":"2025-01-03T00:33:53.594597Z","shell.execute_reply":"2025-01-03T00:33:53.618103Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"MSZoning           4\nLotFrontage      486\nAlley           2721\nUtilities          2\nExterior1st        1\nExterior2nd        1\nMasVnrType      1766\nMasVnrArea        23\nBsmtQual          81\nBsmtCond          82\nBsmtExposure      82\nBsmtFinType1      79\nBsmtFinSF1         1\nBsmtFinType2      80\nBsmtFinSF2         1\nBsmtUnfSF          1\nTotalBsmtSF        1\nElectrical         1\nBsmtFullBath       2\nBsmtHalfBath       2\nKitchenQual        1\nFunctional         2\nFireplaceQu     1420\nGarageType       157\nGarageYrBlt      159\nGarageFinish     159\nGarageCars         1\nGarageArea         1\nGarageQual       159\nGarageCond       159\nPoolQC          2909\nFence           2348\nMiscFeature     2814\nSaleType           1\ndtype: int64"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"df_null = df[df.isnull().sum()[df.isnull().sum() > 0].index]\nprint()\n ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:33:56.136058Z","iopub.execute_input":"2025-01-03T00:33:56.136414Z","iopub.status.idle":"2025-01-03T00:33:56.161636Z","shell.execute_reply.started":"2025-01-03T00:33:56.136369Z","shell.execute_reply":"2025-01-03T00:33:56.160423Z"}},"outputs":[{"name":"stdout","text":"\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"df_null.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:00.379418Z","iopub.execute_input":"2025-01-03T00:34:00.379782Z","iopub.status.idle":"2025-01-03T00:34:00.404466Z","shell.execute_reply.started":"2025-01-03T00:34:00.379751Z","shell.execute_reply":"2025-01-03T00:34:00.403304Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"   MSZoning  LotFrontage Alley Utilities Exterior1st Exterior2nd MasVnrType  \\\nId                                                                            \n1        RL         65.0   NaN    AllPub     VinylSd     VinylSd    BrkFace   \n2        RL         80.0   NaN    AllPub     MetalSd     MetalSd        NaN   \n3        RL         68.0   NaN    AllPub     VinylSd     VinylSd    BrkFace   \n4        RL         60.0   NaN    AllPub     Wd Sdng     Wd Shng        NaN   \n5        RL         84.0   NaN    AllPub     VinylSd     VinylSd    BrkFace   \n\n    MasVnrArea BsmtQual BsmtCond  ... GarageYrBlt GarageFinish  GarageCars  \\\nId                                ...                                        \n1        196.0       Gd       TA  ...      2003.0          RFn         2.0   \n2          0.0       Gd       TA  ...      1976.0          RFn         2.0   \n3        162.0       Gd       TA  ...      2001.0          RFn         2.0   \n4          0.0       TA       Gd  ...      1998.0          Unf         3.0   \n5        350.0       Gd       TA  ...      2000.0          RFn         3.0   \n\n   GarageArea  GarageQual  GarageCond  PoolQC Fence  MiscFeature  SaleType  \nId                                                                          \n1       548.0          TA          TA     NaN   NaN          NaN        WD  \n2       460.0          TA          TA     NaN   NaN          NaN        WD  \n3       608.0          TA          TA     NaN   NaN          NaN        WD  \n4       642.0          TA          TA     NaN   NaN          NaN        WD  \n5       836.0          TA          TA     NaN   NaN          NaN        WD  \n\n[5 rows x 34 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>Alley</th>\n      <th>Utilities</th>\n      <th>Exterior1st</th>\n      <th>Exterior2nd</th>\n      <th>MasVnrType</th>\n      <th>MasVnrArea</th>\n      <th>BsmtQual</th>\n      <th>BsmtCond</th>\n      <th>...</th>\n      <th>GarageYrBlt</th>\n      <th>GarageFinish</th>\n      <th>GarageCars</th>\n      <th>GarageArea</th>\n      <th>GarageQual</th>\n      <th>GarageCond</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>SaleType</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>NaN</td>\n      <td>AllPub</td>\n      <td>VinylSd</td>\n      <td>VinylSd</td>\n      <td>BrkFace</td>\n      <td>196.0</td>\n      <td>Gd</td>\n      <td>TA</td>\n      <td>...</td>\n      <td>2003.0</td>\n      <td>RFn</td>\n      <td>2.0</td>\n      <td>548.0</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WD</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>NaN</td>\n      <td>AllPub</td>\n      <td>MetalSd</td>\n      <td>MetalSd</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>Gd</td>\n      <td>TA</td>\n      <td>...</td>\n      <td>1976.0</td>\n      <td>RFn</td>\n      <td>2.0</td>\n      <td>460.0</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WD</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>NaN</td>\n      <td>AllPub</td>\n      <td>VinylSd</td>\n      <td>VinylSd</td>\n      <td>BrkFace</td>\n      <td>162.0</td>\n      <td>Gd</td>\n      <td>TA</td>\n      <td>...</td>\n      <td>2001.0</td>\n      <td>RFn</td>\n      <td>2.0</td>\n      <td>608.0</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WD</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>NaN</td>\n      <td>AllPub</td>\n      <td>Wd Sdng</td>\n      <td>Wd Shng</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>TA</td>\n      <td>Gd</td>\n      <td>...</td>\n      <td>1998.0</td>\n      <td>Unf</td>\n      <td>3.0</td>\n      <td>642.0</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WD</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>NaN</td>\n      <td>AllPub</td>\n      <td>VinylSd</td>\n      <td>VinylSd</td>\n      <td>BrkFace</td>\n      <td>350.0</td>\n      <td>Gd</td>\n      <td>TA</td>\n      <td>...</td>\n      <td>2000.0</td>\n      <td>RFn</td>\n      <td>3.0</td>\n      <td>836.0</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>WD</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 34 columns</p>\n</div>"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"sns.heatmap(df_null.isnull())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:02.313308Z","iopub.execute_input":"2025-01-03T00:34:02.313735Z","iopub.status.idle":"2025-01-03T00:34:02.986806Z","shell.execute_reply.started":"2025-01-03T00:34:02.313702Z","shell.execute_reply":"2025-01-03T00:34:02.985675Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"<Axes: ylabel='Id'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":41},{"cell_type":"markdown","source":"# Drop Null Columns (Optional):\n\n\n* If there are columns where most values are null, drop them entirely.\n* Loop each column in the DataFrame (df) and droppped any column where most entries are null.\n","metadata":{}},{"cell_type":"code","source":"df_objects = df[df.select_dtypes(include=['object']).columns]\ndf = df.drop(df[df_objects.isna().sum()[df_objects.isna().sum() > 1100].index], axis = 1)\nprint(\"Succsessfully dropped\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:06.097542Z","iopub.execute_input":"2025-01-03T00:34:06.098091Z","iopub.status.idle":"2025-01-03T00:34:06.127751Z","shell.execute_reply.started":"2025-01-03T00:34:06.098047Z","shell.execute_reply":"2025-01-03T00:34:06.126731Z"}},"outputs":[{"name":"stdout","text":"Succsessfully dropped\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"# Identify columns with more than 1100 missing values\ncols_to_drop = df_objects.columns[df_objects.isna().sum() > 1100]\n\n# Drop these columns from the DataFrame\ndf_objects = df_objects.drop(columns=cols_to_drop)\n\n# Fill remaining missing values with 'null'\ndf_objects = df_objects.fillna('null')\n\n# One-hot encoding for the categorical columns\ndf_objects_encoded = pd.get_dummies(df_objects)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:08.216136Z","iopub.execute_input":"2025-01-03T00:34:08.216537Z","iopub.status.idle":"2025-01-03T00:34:08.274773Z","shell.execute_reply.started":"2025-01-03T00:34:08.216501Z","shell.execute_reply":"2025-01-03T00:34:08.273911Z"}},"outputs":[],"execution_count":43},{"cell_type":"markdown","source":"# Separate Numerical Columns:\n\n* Retain only columns that have numerical data types (e.g., integers, floats).\n* Drop object-type (non-numerical) columns for now.","metadata":{}},{"cell_type":"code","source":"df_objects.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:11.139115Z","iopub.execute_input":"2025-01-03T00:34:11.139478Z","iopub.status.idle":"2025-01-03T00:34:11.160221Z","shell.execute_reply.started":"2025-01-03T00:34:11.139449Z","shell.execute_reply":"2025-01-03T00:34:11.159289Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"   MSZoning Street LotShape LandContour Utilities LotConfig LandSlope  \\\nId                                                                      \n1        RL   Pave      Reg         Lvl    AllPub    Inside       Gtl   \n2        RL   Pave      Reg         Lvl    AllPub       FR2       Gtl   \n3        RL   Pave      IR1         Lvl    AllPub    Inside       Gtl   \n4        RL   Pave      IR1         Lvl    AllPub    Corner       Gtl   \n5        RL   Pave      IR1         Lvl    AllPub       FR2       Gtl   \n\n   Neighborhood Condition1 Condition2  ... Electrical KitchenQual Functional  \\\nId                                     ...                                     \n1       CollgCr       Norm       Norm  ...      SBrkr          Gd        Typ   \n2       Veenker      Feedr       Norm  ...      SBrkr          TA        Typ   \n3       CollgCr       Norm       Norm  ...      SBrkr          Gd        Typ   \n4       Crawfor       Norm       Norm  ...      SBrkr          Gd        Typ   \n5       NoRidge       Norm       Norm  ...      SBrkr          Gd        Typ   \n\n   GarageType GarageFinish GarageQual GarageCond PavedDrive SaleType  \\\nId                                                                     \n1      Attchd          RFn         TA         TA          Y       WD   \n2      Attchd          RFn         TA         TA          Y       WD   \n3      Attchd          RFn         TA         TA          Y       WD   \n4      Detchd          Unf         TA         TA          Y       WD   \n5      Attchd          RFn         TA         TA          Y       WD   \n\n   SaleCondition  \nId                \n1         Normal  \n2         Normal  \n3         Normal  \n4        Abnorml  \n5         Normal  \n\n[5 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSZoning</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>Neighborhood</th>\n      <th>Condition1</th>\n      <th>Condition2</th>\n      <th>...</th>\n      <th>Electrical</th>\n      <th>KitchenQual</th>\n      <th>Functional</th>\n      <th>GarageType</th>\n      <th>GarageFinish</th>\n      <th>GarageQual</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>RL</td>\n      <td>Pave</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>CollgCr</td>\n      <td>Norm</td>\n      <td>Norm</td>\n      <td>...</td>\n      <td>SBrkr</td>\n      <td>Gd</td>\n      <td>Typ</td>\n      <td>Attchd</td>\n      <td>RFn</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>RL</td>\n      <td>Pave</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>Gtl</td>\n      <td>Veenker</td>\n      <td>Feedr</td>\n      <td>Norm</td>\n      <td>...</td>\n      <td>SBrkr</td>\n      <td>TA</td>\n      <td>Typ</td>\n      <td>Attchd</td>\n      <td>RFn</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>RL</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>CollgCr</td>\n      <td>Norm</td>\n      <td>Norm</td>\n      <td>...</td>\n      <td>SBrkr</td>\n      <td>Gd</td>\n      <td>Typ</td>\n      <td>Attchd</td>\n      <td>RFn</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RL</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Corner</td>\n      <td>Gtl</td>\n      <td>Crawfor</td>\n      <td>Norm</td>\n      <td>Norm</td>\n      <td>...</td>\n      <td>SBrkr</td>\n      <td>Gd</td>\n      <td>Typ</td>\n      <td>Detchd</td>\n      <td>Unf</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RL</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>Gtl</td>\n      <td>NoRidge</td>\n      <td>Norm</td>\n      <td>Norm</td>\n      <td>...</td>\n      <td>SBrkr</td>\n      <td>Gd</td>\n      <td>Typ</td>\n      <td>Attchd</td>\n      <td>RFn</td>\n      <td>TA</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 37 columns</p>\n</div>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"df_objects['MSZoning'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:13.045682Z","iopub.execute_input":"2025-01-03T00:34:13.046042Z","iopub.status.idle":"2025-01-03T00:34:13.054175Z","shell.execute_reply.started":"2025-01-03T00:34:13.046012Z","shell.execute_reply":"2025-01-03T00:34:13.052831Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"MSZoning\nRL         2265\nRM          460\nFV          139\nRH           26\nC (all)      25\nnull          4\nName: count, dtype: int64"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"df_objects_encoded.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:14.946884Z","iopub.execute_input":"2025-01-03T00:34:14.947227Z","iopub.status.idle":"2025-01-03T00:34:14.969909Z","shell.execute_reply.started":"2025-01-03T00:34:14.947202Z","shell.execute_reply":"2025-01-03T00:34:14.968854Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"    MSZoning_C (all)  MSZoning_FV  MSZoning_RH  MSZoning_RL  MSZoning_RM  \\\nId                                                                         \n1              False        False        False         True        False   \n2              False        False        False         True        False   \n3              False        False        False         True        False   \n4              False        False        False         True        False   \n5              False        False        False         True        False   \n\n    MSZoning_null  Street_Grvl  Street_Pave  LotShape_IR1  LotShape_IR2  ...  \\\nId                                                                       ...   \n1           False        False         True         False         False  ...   \n2           False        False         True         False         False  ...   \n3           False        False         True          True         False  ...   \n4           False        False         True          True         False  ...   \n5           False        False         True          True         False  ...   \n\n    SaleType_New  SaleType_Oth  SaleType_WD  SaleType_null  \\\nId                                                           \n1          False         False         True          False   \n2          False         False         True          False   \n3          False         False         True          False   \n4          False         False         True          False   \n5          False         False         True          False   \n\n    SaleCondition_Abnorml  SaleCondition_AdjLand  SaleCondition_Alloca  \\\nId                                                                       \n1                   False                  False                 False   \n2                   False                  False                 False   \n3                   False                  False                 False   \n4                    True                  False                 False   \n5                   False                  False                 False   \n\n    SaleCondition_Family  SaleCondition_Normal  SaleCondition_Partial  \nId                                                                     \n1                  False                  True                  False  \n2                  False                  True                  False  \n3                  False                  True                  False  \n4                  False                 False                  False  \n5                  False                  True                  False  \n\n[5 rows x 247 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSZoning_C (all)</th>\n      <th>MSZoning_FV</th>\n      <th>MSZoning_RH</th>\n      <th>MSZoning_RL</th>\n      <th>MSZoning_RM</th>\n      <th>MSZoning_null</th>\n      <th>Street_Grvl</th>\n      <th>Street_Pave</th>\n      <th>LotShape_IR1</th>\n      <th>LotShape_IR2</th>\n      <th>...</th>\n      <th>SaleType_New</th>\n      <th>SaleType_Oth</th>\n      <th>SaleType_WD</th>\n      <th>SaleType_null</th>\n      <th>SaleCondition_Abnorml</th>\n      <th>SaleCondition_AdjLand</th>\n      <th>SaleCondition_Alloca</th>\n      <th>SaleCondition_Family</th>\n      <th>SaleCondition_Normal</th>\n      <th>SaleCondition_Partial</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 247 columns</p>\n</div>"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"for i in df_objects_encoded.columns:\n    if 'null' in i:\n        df_objects_encoded = df_objects_encoded.drop(i, axis = 1)\n        print(i)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:16.757017Z","iopub.execute_input":"2025-01-03T00:34:16.757360Z","iopub.status.idle":"2025-01-03T00:34:16.804216Z","shell.execute_reply.started":"2025-01-03T00:34:16.757332Z","shell.execute_reply":"2025-01-03T00:34:16.803247Z"}},"outputs":[{"name":"stdout","text":"MSZoning_null\nUtilities_null\nExterior1st_null\nExterior2nd_null\nBsmtQual_null\nBsmtCond_null\nBsmtExposure_null\nBsmtFinType1_null\nBsmtFinType2_null\nElectrical_null\nKitchenQual_null\nFunctional_null\nGarageType_null\nGarageFinish_null\nGarageQual_null\nGarageCond_null\nSaleType_null\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"new_df =pd.concat([df, df_objects_encoded], axis = 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:18.825687Z","iopub.execute_input":"2025-01-03T00:34:18.826064Z","iopub.status.idle":"2025-01-03T00:34:18.836166Z","shell.execute_reply.started":"2025-01-03T00:34:18.826032Z","shell.execute_reply":"2025-01-03T00:34:18.835162Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"len(new_df.columns)\nprint('New columns created')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:21.184145Z","iopub.execute_input":"2025-01-03T00:34:21.184561Z","iopub.status.idle":"2025-01-03T00:34:21.189606Z","shell.execute_reply.started":"2025-01-03T00:34:21.184510Z","shell.execute_reply":"2025-01-03T00:34:21.188232Z"}},"outputs":[{"name":"stdout","text":"New columns created\n","output_type":"stream"}],"execution_count":49},{"cell_type":"code","source":"new_df = new_df.drop(df.select_dtypes(include=['object']), axis =1)\n\nnew_df.isna().sum()[new_df.isna().sum() > 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:22.740315Z","iopub.execute_input":"2025-01-03T00:34:22.740793Z","iopub.status.idle":"2025-01-03T00:34:22.756231Z","shell.execute_reply.started":"2025-01-03T00:34:22.740758Z","shell.execute_reply":"2025-01-03T00:34:22.755138Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"LotFrontage     486\nMasVnrArea       23\nBsmtFinSF1        1\nBsmtFinSF2        1\nBsmtUnfSF         1\nTotalBsmtSF       1\nBsmtFullBath      2\nBsmtHalfBath      2\nGarageYrBlt     159\nGarageCars        1\nGarageArea        1\ndtype: int64"},"metadata":{}}],"execution_count":50},{"cell_type":"markdown","source":"# Impute Missing Values:\n\n* Mode Columns: For categorical columns, fill missing values with the mode (most frequent value).\n* Mean Columns: For numerical columns, fill missing values with the mean (average value).\n* Use functions like .fillna() to handle this.","metadata":{}},{"cell_type":"code","source":"Mode_columns = ['GarageCars', 'GarageYrBlt', 'BsmtFullBath', 'BsmtHalfBath']\nMean_columns = ['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'GarageArea']\n\nfor i in Mode_columns:\n    new_df[i] = new_df[i].fillna(new_df[i].mode()[0])\n\nfor i in Mean_columns:\n    new_df[i] = new_df[i].fillna(np.round(new_df[i].mean()))\n\nnew_df.isna().sum()[new_df.isna().sum() > 0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:25.837291Z","iopub.execute_input":"2025-01-03T00:34:25.837655Z","iopub.status.idle":"2025-01-03T00:34:25.858266Z","shell.execute_reply.started":"2025-01-03T00:34:25.837627Z","shell.execute_reply":"2025-01-03T00:34:25.857341Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"Series([], dtype: int64)"},"metadata":{}}],"execution_count":51},{"cell_type":"markdown","source":"# Step 2: Prepare Data for Training\n# Split Training and Testing Data:\n* Combine your training and testing data temporarily for consistent pre-processing.\n* After cleaning, split them back into two datasets (df1 for training, df2 for testing).\n\n# Drop Target Variable in Testing Data:\n* For testing data (df2), drop the column youâ€™re predicting (e.g., SalePrice).\n# Save Final Clean DataFrames:\n* The training data (df1) should have both features and the target variable.\n* The testing data (df2) should only contain features.\n","metadata":{}},{"cell_type":"code","source":"# Split into training and testing data\ntraining_data = new_df[0:len(df_1)]\ntesting_data = new_df[len(df_1):]\n\n# Correct column name for dropping\ntesting_data = testing_data.drop(columns='SalePrice')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:29.347909Z","iopub.execute_input":"2025-01-03T00:34:29.348248Z","iopub.status.idle":"2025-01-03T00:34:29.355161Z","shell.execute_reply.started":"2025-01-03T00:34:29.348220Z","shell.execute_reply":"2025-01-03T00:34:29.353891Z"}},"outputs":[],"execution_count":52},{"cell_type":"markdown","source":"# Step 3: Train-Test Split\n# Divide Training Data:\n\n# Use train_test_split to divide your training data into:\n \n>    1. Training Set: 80% of the data to train the model.\n>    2. Validation Set: 20% to evaluate how well the model performs.\n","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.linear_model import LinearRegression \nfrom xgboost import XGBRegressor \nfrom sklearn.ensemble import RandomForestRegressor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:34.731768Z","iopub.execute_input":"2025-01-03T00:34:34.732102Z","iopub.status.idle":"2025-01-03T00:34:34.736541Z","shell.execute_reply.started":"2025-01-03T00:34:34.732074Z","shell.execute_reply":"2025-01-03T00:34:34.735524Z"}},"outputs":[],"execution_count":54},{"cell_type":"markdown","source":"# Define Input (X) and Output (Y):\n\n\n\n> * X: Features (independent variables).\n> * Y: Target variable (SalePrice).\n\n\n# Reshape Target Variable:\n\n> * Ensuring the target variable (Y) has two dimensions, as models often expect this format.","metadata":{}},{"cell_type":"code","source":"X = training_data.drop(columns='SalePrice')  # Correct variable name\ny = training_data['SalePrice']              # Correct variable name\n\n# Split data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2)\n\n# Reshape Y_train and Y_test if needed\nY_train = np.reshape(Y_train, (-1, 1))\nY_test = np.reshape(Y_test, (-1, 1))\nX_train.shape, Y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:37.435077Z","iopub.execute_input":"2025-01-03T00:34:37.435535Z","iopub.status.idle":"2025-01-03T00:34:37.448406Z","shell.execute_reply.started":"2025-01-03T00:34:37.435461Z","shell.execute_reply":"2025-01-03T00:34:37.447454Z"}},"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"((1168, 266), (1168, 1))"},"metadata":{}}],"execution_count":55},{"cell_type":"markdown","source":"# * ***Make Sure to Import the Required Models*** *\n\nImport:\n\n\n> * Linear Regression* XGBoost Regressor (gradient boosting)\n>  * Random Forest Regressor*\n>  * \"Install external libraries if necessary, e.g., pip install xgboost.\"\n\n","metadata":{}},{"cell_type":"markdown","source":"# Step 4: Model Training\nTo Train Models:\n* We need to define each model using its specific parameters (e.g., n_estimators, learning_rate).\n* Train the model using the .fit() method with the training data (X_train, Y_train).\n","metadata":{}},{"cell_type":"markdown","source":"# ***Evaluating the Performance:***\n\n\n\n> 1. Test the model on the validation set (X_test, Y_test).\n> 2. Use Mean Squared Error (MSE) as a performance metric (lower MSE indicates better performance).\n\n","metadata":{}},{"cell_type":"markdown","source":"# Model 1 : ","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\n\n# Define and fit the model\nmodel_1 = LinearRegression()\nmodel_1.fit(X_train, Y_train)\n\n# Predict and calculate the mean squared error\ny_pred = model_1.predict(X_test)\nmean_squared_error(Y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:41.504754Z","iopub.execute_input":"2025-01-03T00:34:41.505103Z","iopub.status.idle":"2025-01-03T00:34:41.573723Z","shell.execute_reply.started":"2025-01-03T00:34:41.505075Z","shell.execute_reply":"2025-01-03T00:34:41.568103Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"3030075733.5297956"},"metadata":{}}],"execution_count":56},{"cell_type":"markdown","source":"# Model 2:","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nmodel_2 = XGBRegressor(n_estimators=1000, learning_rate=0.1)\nmodel_2.fit(X_train, Y_train)\ny_pred = model_2.predict(X_test)\nmean_squared_error(Y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:34:45.852619Z","iopub.execute_input":"2025-01-03T00:34:45.852967Z","iopub.status.idle":"2025-01-03T00:34:49.778699Z","shell.execute_reply.started":"2025-01-03T00:34:45.852940Z","shell.execute_reply":"2025-01-03T00:34:49.777778Z"}},"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"1387645833.8781865"},"metadata":{}}],"execution_count":57},{"cell_type":"markdown","source":"# Model 3","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nmodel_3 = RandomForestRegressor(n_estimators=100)\nmodel_3.fit(X_train, Y_train.ravel())\ny_pred = model_3.predict(X_test)\nmean_squared_error(Y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:36:56.697340Z","iopub.execute_input":"2025-01-03T00:36:56.697779Z","iopub.status.idle":"2025-01-03T00:36:59.414778Z","shell.execute_reply.started":"2025-01-03T00:36:56.697746Z","shell.execute_reply":"2025-01-03T00:36:59.413874Z"}},"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"1524624747.81556"},"metadata":{}}],"execution_count":61},{"cell_type":"markdown","source":"# Choose the Best Model:\n\n> Compare the MSE scores of all models and select the one with the lowest error.","metadata":{}},{"cell_type":"markdown","source":"# Model 2 had the lowest error margin\n\n\n> Model 1: 621043871.86406171\n\n> Model 2: 3637.1583048676791\n\n> Model 3: 760064704.4433995\n","metadata":{}},{"cell_type":"markdown","source":"# Now lets test the Models witht the full data set and see the actual margin of error","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nmodel_1 = LinearRegression()\nmodel_1.fit(X, y)\ny_pred = model_1.predict(X_test)\nmean_squared_error(Y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:38:54.570994Z","iopub.execute_input":"2025-01-03T00:38:54.571367Z","iopub.status.idle":"2025-01-03T00:38:54.633929Z","shell.execute_reply.started":"2025-01-03T00:38:54.571338Z","shell.execute_reply":"2025-01-03T00:38:54.631703Z"}},"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"662987139.4920876"},"metadata":{}}],"execution_count":63},{"cell_type":"code","source":"model_2 = XGBRegressor(n_estimators=1000, learning_rate=0.1)\nmodel_2.fit(X,y)\ny_pred = model_2.predict(X_test)\nmean_squared_error(Y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:39:48.291527Z","iopub.execute_input":"2025-01-03T00:39:48.291915Z","iopub.status.idle":"2025-01-03T00:39:52.055899Z","shell.execute_reply.started":"2025-01-03T00:39:48.291881Z","shell.execute_reply":"2025-01-03T00:39:52.055115Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"4292.8295623570275"},"metadata":{}}],"execution_count":65},{"cell_type":"code","source":"model_3 = RandomForestRegressor(n_estimators=100)\nmodel_3.fit(X, y)\ny_pred = model_3.predict(X_test)\nmean_squared_error(Y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:40:43.248789Z","iopub.execute_input":"2025-01-03T00:40:43.249181Z","iopub.status.idle":"2025-01-03T00:40:46.710420Z","shell.execute_reply.started":"2025-01-03T00:40:43.249144Z","shell.execute_reply":"2025-01-03T00:40:46.709362Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"194530390.6926904"},"metadata":{}}],"execution_count":67},{"cell_type":"markdown","source":"# This code will produce a line plot comparing the actual prices (Y_test) and predicted prices (y_pred), sorted by Y_test values for better readability.","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Sort indices based on Y_test for better visualization\nsort_indices = np.argsort(Y_test.ravel()) \n\n# Plot\nplt.figure(figsize=(10, 6))\nplt.plot(np.arange(len(Y_test)), Y_test[sort_indices], label='Original', color='blue')\nplt.plot(np.arange(len(Y_test)), y_pred[sort_indices], label='Predicted', color='red')\nplt.xlabel(\"Index\")\nplt.ylabel(\"Price\")\nplt.title(\"Original vs Predicted Prices\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:49:46.879511Z","iopub.execute_input":"2025-01-03T00:49:46.879991Z","iopub.status.idle":"2025-01-03T00:49:47.143163Z","shell.execute_reply.started":"2025-01-03T00:49:46.879950Z","shell.execute_reply":"2025-01-03T00:49:47.142114Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"# Predict using model_2\npred = model_2.predict(testing_data)\n\n# Create the final DataFrame\nFinal = pd.DataFrame()\nFinal['Id'] = testing_data.index\nFinal['SalePrice'] = pred\n\n# Write DataFrame to a CSV file without index\nFinal.to_csv('output.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T00:56:06.343200Z","iopub.execute_input":"2025-01-03T00:56:06.343589Z","iopub.status.idle":"2025-01-03T00:56:06.517446Z","shell.execute_reply.started":"2025-01-03T00:56:06.343548Z","shell.execute_reply":"2025-01-03T00:56:06.516475Z"}},"outputs":[],"execution_count":71}]}